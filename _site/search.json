[
  {
    "objectID": "01_main.html",
    "href": "01_main.html",
    "title": "Main App",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nimport pandas as pd\nfrom flask import Flask, redirect, request, render_template, flash\nfrom datamodel import Contact, Contacts, ContactErrors\nimport re\n\n\nfrom IPython.display import display_html\n\n\napp = Flask(__name__)\napp.secret_key = \"superdupersecret\"\n\n\n@app.get(\"/\")\ndef index():\n    return redirect(\"/contacts\")\n\n\n@app.get(\"/contacts\")\ndef contacts():\n    search = request.args.get(\"q\")\n    contact_set = None\n    if search is not None: contact_set = Contacts().search(search)\n    else: contact_set = Contacts().all()\n    return render_template(\"index.html\", contact_set=contact_set)\n\n\ndf = Contacts().db\ndf = df[df['id']==1].to_dict('records')[0]; df\n\n{'firstname': 'Jane',\n 'lastname': 'Smith',\n 'phone': '555-5678',\n 'email': 'jane.smith@example.com',\n 'id': 1}\n\n\n\n@app.get(\"/contacts/&lt;int:id&gt;\")\ndef view(id:int):\n    return render_template(\"view.html\", contact=Contacts().get(id))\n\n\nwith app.app_context():\n    print(view(2))\n\n&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Contact.App&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"&gt;\n        &lt;script src=\"https://unpkg.com/htmx.org@2.0.1\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body hx-boost=\"true\"&gt;\n        &lt;main class=\"container\"&gt;\n            &lt;h1&gt; CONTACTS.APP&lt;/h1&gt;\n            &lt;h2&gt; A demo contact application &lt;/h2&gt;\n            &lt;hr&gt;\n            \n    &lt;article&gt;\n        &lt;h1&gt;Alice Johnson &lt;/h1&gt;\n        &lt;div role=\"group\"&gt;\n            &lt;div&gt;555-8765&lt;/div&gt;\n            &lt;div&gt;alice.johnson@example.com&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;footer role=\"group\"&gt;\n            &lt;a href=\"/contacts\" role=\"button\"&gt;Back&lt;/a&gt;\n            &lt;a href=\"/contacts/2/edit\" role=\"button\"&gt;Edit&lt;/a&gt;\n        &lt;/footer&gt;\n    &lt;/article&gt;\n \n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n\n\nContacts().get(2)\n\n{'firstname': 'Alice',\n 'lastname': 'Johnson',\n 'phone': '555-8765',\n 'email': 'alice.johnson@example.com',\n 'id': 2}\n\n\n\n@app.route(\"/contacts/&lt;int:id&gt;/edit\", methods=['GET', 'POST'])\ndef edit(id):\n    if request.method == 'GET':\n        c_dict = Contacts().get(id)\n        c = Contact()\n        c.from_contacts_dict(c_dict)\n        c.check_valid(duplicate_ok=True)\n        return render_template('edit.html', contact=c)\n    else:\n        c_dict = Contacts().get(id)\n        c = Contact()\n        c.from_contacts_dict(c_dict)\n        c.firstname = request.form['firstname']\n        c.lastname = request.form['lastname']\n        c.phone=request.form['phone']\n        c.email=request.form['email']\n        c.check_valid(duplicate_ok=True)\n        if c.commit(duplicate_ok=True):\n            flash(\"Updated Contract\")\n            return redirect(\"/contacts/\"+str(id))\n        else: return render_template('edit.html', contact=c)\n\n\n@app.route(\"/contacts/&lt;int:id&gt;/delete\", methods=['POST'])\ndef delete(id):\n    Contacts().delete(id)\n    flash(\"Contract Deleted\")\n    return redirect(\"/contacts\")\n\n\n@app.route(\"/contacts/&lt;int:id&gt;\", methods=['DELETE'])\ndef delete_htmx(id):\n    Contacts().delete(id)\n    flash(\"Contract Deleted\")\n    return redirect(\"/contacts\", 303)\n\n\ncontact=Contact(firstname=None, lastname=None, phone=None, email=None)\ncontact.firstname\n\n\n@app.route(\"/contacts/new\", methods=['GET'])\ndef contact_new_get():\n    return render_template('new.html', contact=Contact(firstname=None, lastname=None, phone=None, email=None))\n\n\n@app.route(\"/contacts/new\", methods=['POST'])\ndef contact_new():\n    c = Contact(firstname=request.form['firstname'], \n                lastname=request.form['lastname'],\n                phone=request.form['phone'],\n                email=request.form['email'])\n    c.check_valid(duplicate_ok=False)\n    if c.commit(duplicate_ok=False):\n        flash(\"New contract created\")\n        return redirect(\"/contacts\")\n    else: \n        print(c)\n        return render_template('new.html', contact=c)\n\n\nfrom nbdev.export import nb_export\nnb_export(\"01_main.ipynb\", lib_path=\".\", name='main')",
    "crumbs": [
      "Main App"
    ]
  },
  {
    "objectID": "00_datamodel.html",
    "href": "00_datamodel.html",
    "title": "Data Model",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nimport pandas as pd\nfrom dataclasses import dataclass\nimport re\n\n\nfrom IPython.display import display_html\n\n\ndef create_db():\n    people = [\n        {\n            \"firstname\": \"John\",\n            \"lastname\": \"Doe\",\n            \"phone\": \"555-1234\",\n            \"email\": \"john.doe@example.com\"\n        },\n        {\n            \"firstname\": \"Jane\",\n            \"lastname\": \"Smith\",\n            \"phone\": \"555-5678\",\n            \"email\": \"jane.smith@example.com\"\n        },\n        {\n            \"firstname\": \"Alice\",\n            \"lastname\": \"Johnson\",\n            \"phone\": \"555-8765\",\n            \"email\": \"alice.johnson@example.com\"\n        },\n        {\n            \"firstname\": \"Bob\",\n            \"lastname\": \"Williams\",\n            \"phone\": \"555-4321\",\n            \"email\": \"bob.williams@example.com\"\n        },\n        {\n            \"firstname\": \"Charlie\",\n            \"lastname\": \"Brown\",\n            \"phone\": \"555-9876\",\n            \"email\": \"charlie.brown@example.com\"\n        },\n        {\n            \"firstname\": \"Diana\",\n            \"lastname\": \"Miller\",\n            \"phone\": \"555-6543\",\n            \"email\": \"diana.miller@example.com\"\n        },\n        {\n            \"firstname\": \"Edward\",\n            \"lastname\": \"Davis\",\n            \"phone\": \"555-3456\",\n            \"email\": \"edward.davis@example.com\"\n        },\n        {\n            \"firstname\": \"Fiona\",\n            \"lastname\": \"Garcia\",\n            \"phone\": \"555-6789\",\n            \"email\": \"fiona.garcia@example.com\"\n        },\n        {\n            \"firstname\": \"George\",\n            \"lastname\": \"Martinez\",\n            \"phone\": \"555-7890\",\n            \"email\": \"george.martinez@example.com\"\n        },\n        {\n            \"firstname\": \"Hannah\",\n            \"lastname\": \"Rodriguez\",\n            \"phone\": \"555-8901\",\n            \"email\": \"hannah.rodriguez@example.com\"\n        }\n    ]\n\n    # Writing the JSON data to a file\n    file_path = 'contactdb.json'\n    # df = pd.read_json(file_path)\n    df = pd.DataFrame()\n    df = df.from_dict(people)\n    df['id'] = df.index\n    df.to_json(file_path, orient='records')\n\n\ncreate_db()\ndb = pd.read_json('contactdb.json')\ndb.to_dict('records')\n\n[{'firstname': 'John',\n  'lastname': 'Doe',\n  'phone': '555-1234',\n  'email': 'john.doe@example.com',\n  'id': 0},\n {'firstname': 'Jane',\n  'lastname': 'Smith',\n  'phone': '555-5678',\n  'email': 'jane.smith@example.com',\n  'id': 1},\n {'firstname': 'Alice',\n  'lastname': 'Johnson',\n  'phone': '555-8765',\n  'email': 'alice.johnson@example.com',\n  'id': 2},\n {'firstname': 'Bob',\n  'lastname': 'Williams',\n  'phone': '555-4321',\n  'email': 'bob.williams@example.com',\n  'id': 3},\n {'firstname': 'Charlie',\n  'lastname': 'Brown',\n  'phone': '555-9876',\n  'email': 'charlie.brown@example.com',\n  'id': 4},\n {'firstname': 'Diana',\n  'lastname': 'Miller',\n  'phone': '555-6543',\n  'email': 'diana.miller@example.com',\n  'id': 5},\n {'firstname': 'Edward',\n  'lastname': 'Davis',\n  'phone': '555-3456',\n  'email': 'edward.davis@example.com',\n  'id': 6},\n {'firstname': 'Fiona',\n  'lastname': 'Garcia',\n  'phone': '555-6789',\n  'email': 'fiona.garcia@example.com',\n  'id': 7},\n {'firstname': 'George',\n  'lastname': 'Martinez',\n  'phone': '555-7890',\n  'email': 'george.martinez@example.com',\n  'id': 8},\n {'firstname': 'Hannah',\n  'lastname': 'Rodriguez',\n  'phone': '555-8901',\n  'email': 'hannah.rodriguez@example.com',\n  'id': 9}]\n\n\n\nq = '1234'\n# db[db['firstname'].str.lower().str.contains(q)]\npredicate_firstname = db['firstname'].str.lower().str.contains(q.lower())\npredicate_lastname = db['lastname'].str.lower().str.contains(q.lower())\npredicate_phone = db['phone'].str.lower().str.contains(q.lower())\npredicate_email= db['email'].str.lower().str.contains(q.lower())\ndb[predicate_firstname|predicate_lastname|predicate_phone|predicate_email]\n\n\n\n\n\n\n\n\n\nfirstname\nlastname\nphone\nemail\nid\n\n\n\n\n0\nJohn\nDoe\n555-1234\njohn.doe@example.com\n0\n\n\n\n\n\n\n\n\n\ndb.columns\n\na={'firstname': 'Rahul',\n   'lastname': 'Saraf',\n    'phone':'7347399',\n    'email': 'rahuketu86'}\na['id'] = len(db)\n# db.loc[len(db)] = \na\ndb.loc[len(db), a.keys()] = a.values()\n\n\nclass ContactErrors:\n    firstname:str = None\n    lastname:str = None\n    phone:str = None\n    email:str = None\n\n\n# c = ContactErrors()\n\n\n# Regular expression pattern for validating email\nemail_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\nphone_regex =  r'^(?:\\d{7,}|\\d{1,}-\\d{1,}-?\\d{5,}|\\d+-\\d{7,}|\\d{3}-\\d{4})$'\n\n\n# Function to validate email\ndef validate_email(email):\n    if re.match(email_regex, email): return True\n    else: return False\n\n\ndef check_duplicates(elem, ls):\n   return elem in ls\n\n\n# Function to validate phone number\ndef validate_phone_number(phone_number):\n    if re.match(phone_regex, phone_number): return True\n    else: return False\n\n\n# Example usage\nphone_numbers = [\"555-1234\", \"917347306788\", \"7237424\", \"123-456\", \"123-456-7890\", \"123--456\", \"123-45\"]\nfor number in phone_numbers:\n    if validate_phone_number(number):\n        print(f\"{number}: Valid phone number\")\n    else:\n        print(f\"{number}: Invalid phone number\")\n\n555-1234: Valid phone number\n917347306788: Valid phone number\n7237424: Valid phone number\n123-456: Invalid phone number\n123-456-7890: Invalid phone number\n123--456: Invalid phone number\n123-45: Invalid phone number\n\n\n\n# Example usage\nemail = \"example@example.com\"\nemail = \"rahuketu\"\nif validate_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")\n\nInvalid email\n\n\n\nclass Contacts(object):\n    def __init__(self) -&gt; None:\n        self.refresh()\n\n    def search(self, q):\n        predicate_firstname = self.db['firstname'].str.lower().str.contains(q.lower())\n        predicate_lastname = self.db['lastname'].str.lower().str.contains(q.lower())\n        predicate_phone = self.db['phone'].str.lower().str.contains(q.lower())\n        predicate_email= self.db['email'].str.lower().str.contains(q.lower())\n        filter_df = self.db[predicate_firstname|predicate_lastname|predicate_phone|predicate_email]\n        return filter_df.to_dict('records')\n    \n    def refresh(self):\n        self.file_path = 'contactdb.json'\n        self.db = pd.read_json(self.file_path)\n\n    def all(self):\n        return self.db.to_dict('records')\n    \n    def get(self, id):\n        contact = self.db[self.db['id']==id]\n        return contact.to_dict('records')[0]\n    \n\n    def add_or_edit(self, id, firstname, lastname, phone, email):\n        a={'firstname': firstname,\n           'lastname': lastname,\n           'phone':phone,\n           'email': email,\n           'id': id}\n        id_idx = None\n        # print(\"id is None\" if id is None else \"id is ok\")\n        if id is None: id_idx = self.db['id'].max()+1; a['id'] = id_idx\n        else: id_idx = self.db[self.db['id']==id].index\n        # print(id_idx)\n        self.db.loc[id_idx, a.keys()] = a.values()\n        # print(self.db.tail(1))\n        self.db.to_json(self.file_path, orient='records')\n        self.refresh()\n\n    def delete(self, id):\n        id_idx = self.db[self.db['id']==id].index\n        self.db.drop(index=id_idx, inplace=True, errors='raise')\n        self.db.to_json(self.file_path, orient='records')\n        self.refresh()\n\n    def get_emails(self):\n        return self.db['email'].tolist()\n\n\n@dataclass\nclass Contact:\n    firstname:str=None\n    lastname:str=None\n    phone:str=None\n    email:str=None\n    id: int =None\n    errors:ContactErrors = ContactErrors()\n    is_valid:bool=True\n\n    def from_contacts_dict(self, c):\n        self.firstname = c['firstname']\n        self.lastname = c['lastname']\n        self.phone = c['phone']\n        self.email = c['email']\n        self.id = c['id']\n        self.check_valid(duplicate_ok=True)\n\n    def check_valid(self, duplicate_ok=False):\n        self.is_valid = True\n        if self.firstname is None or self.firstname == \"\":\n            self.is_valid = False\n            self.errors.firstname = \"Firstname is empty\"\n        \n        if self.lastname is None or self.lastname == \"\":\n            self.is_valid = False\n            self.errors.lastname = \"Lastname is empty\"\n        \n        if self.phone is None or self.phone == \"\":\n            self.is_valid = False\n            self.errors.phone= \"Phone is empty\"\n        elif not validate_phone_number(self.phone):\n            self.is_valid = False\n            self.errors.phone= \"Format phone not correct\"\n        else: pass\n\n        if self.email is None or self.email == \"\":\n            self.is_valid = False\n            self.errors.email= \"Email is empty\"\n        elif not validate_email(self.email):\n            self.is_valid = False\n            self.errors.email= \"Format email not correct\"\n        elif not duplicate_ok:\n            if check_duplicates(self.email, Contacts().get_emails()):\n                self.is_valid = False\n                self.errors.email= \"Duplicated email\"\n        else: pass\n\n    def commit(self, duplicate_ok=True):\n        self.check_valid(duplicate_ok=duplicate_ok)\n        if not self.is_valid: return False\n        else:\n            db = Contacts()\n            print(\"None\" if self.id is None else \"ok\")\n            db.add_or_edit(id=self.id,\n                    firstname = self.firstname, \n                    lastname = self.lastname, \n                    phone=self.phone, \n                    email=self.email)\n            return True\n\n    def __repr__(self) -&gt; str:\n        a= [[self.firstname, self.errors.firstname],\n            [self.lastname, self.errors.lastname],\n            [self.phone, self.errors.phone],\n            [self.email, self.errors.email],\n            [self.is_valid, \"\"]]\n        return f\"Contact{str(a)}\"\n\n\ncreate_db()\nc = Contact(firstname='Rahul', lastname='Saraf', phone='555-1200', email='rahuketu@gmail.com')\nc.check_valid(duplicate_ok=False)\nc.commit(duplicate_ok=False)\n# c.id\n\nNone\n\n\nTrue\n\n\n\nvalidate_email(c.email)\n\nduplicate_ok=False\n\ncheck_duplicates(c.email, Contacts().get_emails())\n\nTrue\n\n\n\nContacts().get_emails()\n\n['john.doe@example.com',\n 'jane.smith@example.com',\n 'alice.johnson@example.com',\n 'bob.williams@example.com',\n 'charlie.brown@example.com',\n 'diana.miller@example.com',\n 'edward.davis@example.com',\n 'fiona.garcia@example.com',\n 'george.martinez@example.com',\n 'hannah.rodriguez@example.com',\n 'rahuketu@gmail.com']\n\n\n\nContact()\n\nContact[[None, None], [None, None], [None, None], [None, None], [True, '']]\n\n\n\nc_set = Contacts()\nc_dict = c_set.get(0)\nc_dict\nc = Contact()\nc.from_contacts_dict(c_dict)\nc.phone = '555-1001'\nc.commit()\n\nok\n\n\nTrue\n\n\n\n# new_vals = [2, 'Alice', 'Johnson', '555-8767', 'alice.johnson@example.com']\n# c.edit(*new_vals)\n# c.get(2)\n\n\nc = Contacts()\na_dict = c.db.loc[0].to_dict(); a_dict\n# a_dict.pop('id', None); a_dict\nc.delete(0)\n\nc.add_or_edit(*list(a_dict.values()))\nc.all()\n\n[{'firstname': 'Jane',\n  'lastname': 'Smith',\n  'phone': '555-5678',\n  'email': 'jane.smith@example.com',\n  'id': 1},\n {'firstname': 'Alice',\n  'lastname': 'Johnson',\n  'phone': '555-8765',\n  'email': 'alice.johnson@example.com',\n  'id': 2},\n {'firstname': 'Bob',\n  'lastname': 'Williams',\n  'phone': '555-4321',\n  'email': 'bob.williams@example.com',\n  'id': 3},\n {'firstname': 'Charlie',\n  'lastname': 'Brown',\n  'phone': '555-9876',\n  'email': 'charlie.brown@example.com',\n  'id': 4},\n {'firstname': 'Diana',\n  'lastname': 'Miller',\n  'phone': '555-6543',\n  'email': 'diana.miller@example.com',\n  'id': 5},\n {'firstname': 'Edward',\n  'lastname': 'Davis',\n  'phone': '555-3456',\n  'email': 'edward.davis@example.com',\n  'id': 6},\n {'firstname': 'Fiona',\n  'lastname': 'Garcia',\n  'phone': '555-6789',\n  'email': 'fiona.garcia@example.com',\n  'id': 7},\n {'firstname': 'George',\n  'lastname': 'Martinez',\n  'phone': '555-7890',\n  'email': 'george.martinez@example.com',\n  'id': 8},\n {'firstname': 'Hannah',\n  'lastname': 'Rodriguez',\n  'phone': '555-8901',\n  'email': 'hannah.rodriguez@example.com',\n  'id': 9},\n {'firstname': 'Rahul',\n  'lastname': 'Saraf',\n  'phone': '555-1200',\n  'email': 'rahuketu@gmail.com',\n  'id': 10}]\n\n\n\ndf = Contacts().db\ndf = df[df['id']==1].to_dict('records')[0]; df\n\n{'firstname': 'Jane',\n 'lastname': 'Smith',\n 'phone': '555-5678',\n 'email': 'jane.smith@example.com',\n 'id': 1}\n\n\n\nContacts().get(2)\n\n{'firstname': 'Alice',\n 'lastname': 'Johnson',\n 'phone': '555-8765',\n 'email': 'alice.johnson@example.com',\n 'id': 2}\n\n\n\nfrom nbdev.export import nb_export\nnb_export(\"00_datamodel.ipynb\", lib_path=\".\", name='datamodel')",
    "crumbs": [
      "Data Model"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "API",
    "section": "",
    "text": "This includes all the code for htmx-book",
    "crumbs": [
      "API"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project recreates htmx-book application but with a twist of nbdev."
  }
]