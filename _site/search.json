[
  {
    "objectID": "01_main.html",
    "href": "01_main.html",
    "title": "Main App",
    "section": "",
    "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\nimport pandas as pd\nfrom flask import Flask, redirect, request, render_template, flash\nfrom dataclasses import dataclass\n\n\nfrom IPython.display import display_html\n\n\npeople = [\n    {\n        \"firstname\": \"John\",\n        \"lastname\": \"Doe\",\n        \"phone\": \"555-1234\",\n        \"email\": \"john.doe@example.com\"\n    },\n    {\n        \"firstname\": \"Jane\",\n        \"lastname\": \"Smith\",\n        \"phone\": \"555-5678\",\n        \"email\": \"jane.smith@example.com\"\n    },\n    {\n        \"firstname\": \"Alice\",\n        \"lastname\": \"Johnson\",\n        \"phone\": \"555-8765\",\n        \"email\": \"alice.johnson@example.com\"\n    },\n    {\n        \"firstname\": \"Bob\",\n        \"lastname\": \"Williams\",\n        \"phone\": \"555-4321\",\n        \"email\": \"bob.williams@example.com\"\n    },\n    {\n        \"firstname\": \"Charlie\",\n        \"lastname\": \"Brown\",\n        \"phone\": \"555-9876\",\n        \"email\": \"charlie.brown@example.com\"\n    },\n    {\n        \"firstname\": \"Diana\",\n        \"lastname\": \"Miller\",\n        \"phone\": \"555-6543\",\n        \"email\": \"diana.miller@example.com\"\n    },\n    {\n        \"firstname\": \"Edward\",\n        \"lastname\": \"Davis\",\n        \"phone\": \"555-3456\",\n        \"email\": \"edward.davis@example.com\"\n    },\n    {\n        \"firstname\": \"Fiona\",\n        \"lastname\": \"Garcia\",\n        \"phone\": \"555-6789\",\n        \"email\": \"fiona.garcia@example.com\"\n    },\n    {\n        \"firstname\": \"George\",\n        \"lastname\": \"Martinez\",\n        \"phone\": \"555-7890\",\n        \"email\": \"george.martinez@example.com\"\n    },\n    {\n        \"firstname\": \"Hannah\",\n        \"lastname\": \"Rodriguez\",\n        \"phone\": \"555-8901\",\n        \"email\": \"hannah.rodriguez@example.com\"\n    }\n]\n\n# Writing the JSON data to a file\nfile_path = 'contactdb.json'\n# df = pd.read_json(file_path)\ndf = pd.DataFrame()\ndf = df.from_dict(people)\ndf['id'] = df.index\ndf.to_json(file_path, orient='records')\n\n\ndb = pd.read_json('contactdb.json')\ndb.to_dict('records')\n\n[{'firstname': 'John',\n  'lastname': 'Doe',\n  'phone': '555-1234',\n  'email': 'john.doe@example.com',\n  'id': 0},\n {'firstname': 'Jane',\n  'lastname': 'Smith',\n  'phone': '555-5678',\n  'email': 'jane.smith@example.com',\n  'id': 1},\n {'firstname': 'Alice',\n  'lastname': 'Johnson',\n  'phone': '555-8765',\n  'email': 'alice.johnson@example.com',\n  'id': 2},\n {'firstname': 'Bob',\n  'lastname': 'Williams',\n  'phone': '555-4321',\n  'email': 'bob.williams@example.com',\n  'id': 3},\n {'firstname': 'Charlie',\n  'lastname': 'Brown',\n  'phone': '555-9876',\n  'email': 'charlie.brown@example.com',\n  'id': 4},\n {'firstname': 'Diana',\n  'lastname': 'Miller',\n  'phone': '555-6543',\n  'email': 'diana.miller@example.com',\n  'id': 5},\n {'firstname': 'Edward',\n  'lastname': 'Davis',\n  'phone': '555-3456',\n  'email': 'edward.davis@example.com',\n  'id': 6},\n {'firstname': 'Fiona',\n  'lastname': 'Garcia',\n  'phone': '555-6789',\n  'email': 'fiona.garcia@example.com',\n  'id': 7},\n {'firstname': 'George',\n  'lastname': 'Martinez',\n  'phone': '555-7890',\n  'email': 'george.martinez@example.com',\n  'id': 8},\n {'firstname': 'Hannah',\n  'lastname': 'Rodriguez',\n  'phone': '555-8901',\n  'email': 'hannah.rodriguez@example.com',\n  'id': 9}]\n\n\n\nq = '1234'\n# db[db['firstname'].str.lower().str.contains(q)]\npredicate_firstname = db['firstname'].str.lower().str.contains(q.lower())\npredicate_lastname = db['lastname'].str.lower().str.contains(q.lower())\npredicate_phone = db['phone'].str.lower().str.contains(q.lower())\npredicate_email= db['email'].str.lower().str.contains(q.lower())\ndb[predicate_firstname|predicate_lastname|predicate_phone|predicate_email]\n\n\n\n\n\n\n\n\n\nfirstname\nlastname\nphone\nemail\nid\n\n\n\n\n0\nJohn\nDoe\n555-1234\njohn.doe@example.com\n0\n\n\n\n\n\n\n\n\n\ndb.columns\n\na={'firstname': 'Rahul',\n   'lastname': 'Saraf',\n    'phone':'7347399',\n    'email': 'rahuketu86'}\na['id'] = len(db)\n# db.loc[len(db)] = \na\ndb.loc[len(db), a.keys()] = a.values()\n\n\ndb\n\n\n\n\n\n\n\n\n\nfirstname\nlastname\nphone\nemail\nid\n\n\n\n\n0\nJohn\nDoe\n555-1234\njohn.doe@example.com\n0.0\n\n\n1\nJane\nSmith\n555-5678\njane.smith@example.com\n1.0\n\n\n2\nAlice\nJohnson\n555-8765\nalice.johnson@example.com\n2.0\n\n\n3\nBob\nWilliams\n555-4321\nbob.williams@example.com\n3.0\n\n\n4\nCharlie\nBrown\n555-9876\ncharlie.brown@example.com\n4.0\n\n\n5\nDiana\nMiller\n555-6543\ndiana.miller@example.com\n5.0\n\n\n6\nEdward\nDavis\n555-3456\nedward.davis@example.com\n6.0\n\n\n7\nFiona\nGarcia\n555-6789\nfiona.garcia@example.com\n7.0\n\n\n8\nGeorge\nMartinez\n555-7890\ngeorge.martinez@example.com\n8.0\n\n\n9\nHannah\nRodriguez\n555-8901\nhannah.rodriguez@example.com\n9.0\n\n\n10\nRahul\nSaraf\n7347399\nrahuketu86\n10.0\n\n\n\n\n\n\n\n\n\nclass ContactErrors:\n    firstname:str = \"Error in Firstname\"\n    lastname:str = \"Error in Lastname\"\n    phone:str = \"Error in Phone\"\n    email:str = \"Error in Email\"\n\n\nContactErrors()\n\n&lt;__main__.ContactErrors at 0x126f43ce0&gt;\n\n\n\n@dataclass\nclass Contact:\n    firstname:str=None\n    lastname:str=None\n    phone:str=None\n    email:str=None\n    errors:ContactErrors = ContactErrors()\n\n    def save(self):\n        if not self.validate(): return False\n        else: \n            db = Contacts()\n            db.add(firstname = self.firstname, \n                   lastname = self.lastname, \n                   phone=self.phone, \n                   email=self.email)\n            return True\n\n    def validate(self):\n        if not self._check_nones([self.firstname, self.lastname, self.phone, self.email]): return False\n        elif not \"@\" in self.email: return False\n        else:\n            # print(\"Validated\") \n            return True\n\n    def _check_nones(self, ls):\n        for e in ls: \n            # print(e)\n            if e is None or e == \"\": \n                # print(e, \"Noness or empty\")\n                return False\n        return True\n\n\nContact()\n\nContact(firstname=None, lastname=None, phone=None, email=None, errors=&lt;__main__.ContactErrors object at 0x126bc6c30&gt;)\n\n\n\nclass Contacts(object):\n    def __init__(self) -&gt; None:\n        self.refresh()\n\n    def search(self, q):\n        predicate_firstname = self.db['firstname'].str.lower().str.contains(q.lower())\n        predicate_lastname = self.db['lastname'].str.lower().str.contains(q.lower())\n        predicate_phone = self.db['phone'].str.lower().str.contains(q.lower())\n        predicate_email= self.db['email'].str.lower().str.contains(q.lower())\n        filter_df = self.db[predicate_firstname|predicate_lastname|predicate_phone|predicate_email]\n        return filter_df.to_dict('records')\n    \n    def refresh(self):\n        self.file_path = 'contactdb.json'\n        self.db = pd.read_json(self.file_path)\n\n    def all(self):\n        return self.db.to_dict('records')\n    \n    def get(self, id):\n        contact = self.db[self.db['id']==id]\n        # print(contact)\n        return contact.to_dict('records')[0]\n    \n    def add(self, firstname, lastname, phone, email):\n        a={'firstname': firstname,\n           'lastname': lastname,\n           'phone':phone,\n           'email': email}\n        a['id'] = len(self.db)\n        self.db.loc[len(self.db), a.keys()] = a.values()\n        self.db.to_json(self.file_path, orient='records')\n        self.refresh()\n\n    def delete(self, id):\n        self.db.drop(index=id, inplace=True, errors='raise')\n        self.db.to_json(self.file_path, orient='records')\n        self.refresh()\n\n    def edit(self, id, firstname, lastname, phone, email):\n        a={'firstname': firstname,\n           'lastname': lastname,\n           'phone':phone,\n           'email': email,\n           'id': id}\n        self.db.loc[id, a.keys()] = a.values()\n        self.db.to_json(self.file_path, orient='records')\n        self.refresh()\n\n\nc = Contacts()\nc.db.loc[2].to_dict().values()\n\ndict_values(['Alice', 'Johnson', '555-8765', 'alice.johnson@example.com', 2])\n\n\n\nnew_vals = [2, 'Alice', 'Johnson', '555-8767', 'alice.johnson@example.com']\nc.edit(*new_vals)\nc.get(2)\n\n{'firstname': 'Alice',\n 'lastname': 'Johnson',\n 'phone': '555-8767',\n 'email': 'alice.johnson@example.com',\n 'id': 2}\n\n\n\nc = Contacts()\na_dict = c.db.loc[0].to_dict()\na_dict.pop('id', None); a_dict\nc.delete(0)\n\nc.add(*list(a_dict.values()))\nc.all()\n\n[{'firstname': 'Jane',\n  'lastname': 'Smith',\n  'phone': '555-5678',\n  'email': 'jane.smith@example.com',\n  'id': 1},\n {'firstname': 'Alice',\n  'lastname': 'Johnson',\n  'phone': '555-8767',\n  'email': 'alice.johnson@example.com',\n  'id': 2},\n {'firstname': 'Bob',\n  'lastname': 'Williams',\n  'phone': '555-4321',\n  'email': 'bob.williams@example.com',\n  'id': 3},\n {'firstname': 'Charlie',\n  'lastname': 'Brown',\n  'phone': '555-9876',\n  'email': 'charlie.brown@example.com',\n  'id': 4},\n {'firstname': 'Diana',\n  'lastname': 'Miller',\n  'phone': '555-6543',\n  'email': 'diana.miller@example.com',\n  'id': 5},\n {'firstname': 'Edward',\n  'lastname': 'Davis',\n  'phone': '555-3456',\n  'email': 'edward.davis@example.com',\n  'id': 6},\n {'firstname': 'Fiona',\n  'lastname': 'Garcia',\n  'phone': '555-6789',\n  'email': 'fiona.garcia@example.com',\n  'id': 7},\n {'firstname': 'George',\n  'lastname': 'Martinez',\n  'phone': '555-7890',\n  'email': 'george.martinez@example.com',\n  'id': 8},\n {'firstname': 'Hannah',\n  'lastname': 'Rodriguez',\n  'phone': '555-8901',\n  'email': 'hannah.rodriguez@example.com',\n  'id': 9},\n {'firstname': 'John',\n  'lastname': 'Doe',\n  'phone': '555-1234',\n  'email': 'john.doe@example.com',\n  'id': 9}]\n\n\n\napp = Flask(__name__)\napp.secret_key = \"superdupersecret\"\n\n\n@app.get(\"/\")\ndef index():\n    return redirect(\"/contacts\")\n\n\n@app.get(\"/contacts\")\ndef contacts():\n    search = request.args.get(\"q\")\n    contact_set = None\n    if search is not None: contact_set = Contacts().search(search)\n    else: contact_set = Contacts().all()\n    # print(contact_set)\n    return render_template(\"index.html\", contact_set=contact_set)\n\n\nContacts().db[df['id']==1].to_dict('records')[0]\n\n{'firstname': 'Alice',\n 'lastname': 'Johnson',\n 'phone': '555-8767',\n 'email': 'alice.johnson@example.com',\n 'id': 2}\n\n\n\n@app.get(\"/contacts/&lt;int:id&gt;\")\ndef view(id:int):\n    return render_template(\"view.html\", contact=Contacts().get(id))\n\n\nwith app.app_context():\n    print(view(2))\n\n&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Contact.App&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;main class=\"container\"&gt;\n            &lt;h1&gt; CONTACTS.APP&lt;/h1&gt;\n            &lt;h2&gt; A demo contact application &lt;/h2&gt;\n            &lt;hr&gt;\n            \n    &lt;article&gt;\n        &lt;h1&gt;Alice Johnson &lt;/h1&gt;\n        &lt;div role=\"group\"&gt;\n            &lt;div&gt;555-8767&lt;/div&gt;\n            &lt;div&gt;alice.johnson@example.com&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;footer&gt;\n            &lt;a href=\"/contacts\" role=\"button\"&gt;Back&lt;/a&gt;\n        &lt;/footer&gt;\n    &lt;/article&gt;\n\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n\n\nContacts().get(2)\n\n{'firstname': 'Alice',\n 'lastname': 'Johnson',\n 'phone': '555-8767',\n 'email': 'alice.johnson@example.com',\n 'id': 2}\n\n\n\n@app.put(\"/contacts/&lt;int:id&gt;/edit\")\ndef edit(id):\n    return \"Edit View\"\n\n\ncontact=Contact(firstname=None, lastname=None, phone=None, email=None)\ncontact.firstname\n\n\n@app.route(\"/contacts/new\", methods=['GET'])\ndef contact_new_get():\n    return render_template('new.html', contact=Contact(firstname=None, lastname=None, phone=None, email=None))\n\n\n@app.delete(\"/contacts/&lt;int:id&gt;/delete\")\ndef delete(id):\n    Contacts().delete(id)\n    return redirect(\"/contacts\")\n\n\n@app.route(\"/contacts/new\", methods=['POST'])\ndef contact_new():\n    c = Contact(firstname=request.form['firstname'], \n                lastname=request.form['lastname'],\n                phone=request.form['phone'],\n                email=request.form['email'])\n    if c.save():\n        # print(\"Here\")\n        flash(\"New contract created\")\n        return redirect(\"/contacts\")\n    else: \n        # print(c)\n        return render_template('new.html', contact=c)\n\n\nfrom nbdev.export import nb_export\nnb_export(\"01_main.ipynb\", lib_path=\".\", name='main')",
    "crumbs": [
      "Main App"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": ".",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project recreates htmx-book application but with a twist of nbdev."
  }
]