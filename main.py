# AUTOGENERATED! DO NOT EDIT! File to edit: 01_main.ipynb.

# %% auto 0
__all__ = ['app', 'ContactErrors', 'Contact', 'Contacts', 'index', 'contacts', 'view', 'edit', 'contact_new_get', 'contact_new']

# %% 01_main.ipynb 2
import pandas as pd
from flask import Flask, redirect, request, render_template, flash
from dataclasses import dataclass

# %% 01_main.ipynb 9
class ContactErrors:
    firstname:str = "Error in Firstname"
    lastname:str = "Error in Lastname"
    phone:str = "Error in Phone"
    email:str = "Error in Email"

# %% 01_main.ipynb 11
@dataclass
class Contact:
    firstname:str=None
    lastname:str=None
    phone:str=None
    email:str=None
    errors:ContactErrors = ContactErrors()

    def save(self):
        if not self.validate(): return False
        else: 
            db = Contacts()
            db.add(firstname = self.firstname, 
                   lastname = self.lastname, 
                   phone=self.phone, 
                   email=self.email)
            return True

    def validate(self):
        if not self._check_nones([self.firstname, self.lastname, self.phone, self.email]): return False
        elif not "@" in self.email: return False
        else:
            # print("Validated") 
            return True

    def _check_nones(self, ls):
        for e in ls: 
            # print(e)
            if e is None or e == "": 
                # print(e, "Noness or empty")
                return False
        return True
        

# %% 01_main.ipynb 13
class Contacts(object):
    def __init__(self) -> None:
        self.refresh()

    def search(self, q):
        predicate_firstname = self.db['firstname'].str.lower().str.contains(q.lower())
        predicate_lastname = self.db['lastname'].str.lower().str.contains(q.lower())
        predicate_phone = self.db['phone'].str.lower().str.contains(q.lower())
        predicate_email= self.db['email'].str.lower().str.contains(q.lower())
        filter_df = self.db[predicate_firstname|predicate_lastname|predicate_phone|predicate_email]
        return filter_df.to_dict('records')
    
    def refresh(self):
        self.file_path = 'contactdb.json'
        self.db = pd.read_json(self.file_path)

    def all(self):
        return self.db.to_dict('records')
    
    def get(self, id):
        contact = self.db[self.db['id']==id]
        # print(contact)
        return contact.to_dict('records')[0]
    
    def add(self, firstname, lastname, phone, email):
        a={'firstname': firstname,
           'lastname': lastname,
           'phone':phone,
           'email': email}
        a['id'] = len(self.db)
        self.db.loc[len(self.db), a.keys()] = a.values()
        self.db.to_json(self.file_path, orient='records')
        self.refresh()

    def delete(self, id):
        self.db.drop(index=id, inplace=True, errors='raise')
        self.db.to_json(self.file_path, orient='records')
        self.refresh()

    def edit(self, id, firstname, lastname, phone, email):
        a={'firstname': firstname,
           'lastname': lastname,
           'phone':phone,
           'email': email,
           'id': id}
        self.db.loc[id, a.keys()] = a.values()
        self.db.to_json(self.file_path, orient='records')
        self.refresh()


# %% 01_main.ipynb 17
app = Flask(__name__)
app.secret_key = "superdupersecret"


# %% 01_main.ipynb 18
@app.get("/")
def index():
    return redirect("/contacts")

# %% 01_main.ipynb 19
@app.get("/contacts")
def contacts():
    search = request.args.get("q")
    contact_set = None
    if search is not None: contact_set = Contacts().search(search)
    else: contact_set = Contacts().all()
    # print(contact_set)
    return render_template("index.html", contact_set=contact_set)

# %% 01_main.ipynb 21
@app.get("/contacts/<int:id>")
def view(id:int):
    return render_template("view.html", contact=Contacts().get(id))

# %% 01_main.ipynb 24
@app.put("/contacts/<int:id>/edit")
def edit(id):
    return "Edit View"

# %% 01_main.ipynb 26
@app.route("/contacts/new", methods=['GET'])
def contact_new_get():
    return render_template('new.html', contact=Contact(firstname=None, lastname=None, phone=None, email=None))

# %% 01_main.ipynb 27
@app.route("/contacts/new", methods=['POST'])
def contact_new():
    c = Contact(firstname=request.form['firstname'], 
                lastname=request.form['lastname'],
                phone=request.form['phone'],
                email=request.form['email'])
    if c.save():
        # print("Here")
        flash("New contract created")
        return redirect("/contacts")
    else: 
        # print(c)
        return render_template('new.html', contact=c)
